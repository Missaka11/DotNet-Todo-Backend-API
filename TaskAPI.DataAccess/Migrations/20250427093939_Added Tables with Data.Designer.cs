// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskAPI.DataAccess;

#nullable disable

namespace TaskAPI.DataAccess.Migrations
{
    [DbContext(typeof(TodoDBContext))]
    [Migration("20250427093939_Added Tables with Data")]
    partial class AddedTableswithData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AddressNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressNo = "789",
                            City = "California",
                            FullName = "John Doe",
                            Street = "Smith St"
                        },
                        new
                        {
                            Id = 2,
                            AddressNo = "456",
                            City = "Los Angeles",
                            FullName = "Will Smith",
                            Street = "Johnson St"
                        },
                        new
                        {
                            Id = 3,
                            AddressNo = "123",
                            City = "New York",
                            FullName = "Robert Hendry",
                            Street = "Main St"
                        });
                });

            modelBuilder.Entity("Todo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<DateTime>("Due")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Todos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 3,
                            Created = new DateTime(2025, 4, 27, 15, 9, 39, 409, DateTimeKind.Local).AddTicks(400),
                            Description = "Get some fruits for the week",
                            Due = new DateTime(2025, 5, 7, 15, 9, 39, 409, DateTimeKind.Local).AddTicks(440),
                            Status = 0,
                            Title = "Get fruits"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 1,
                            Created = new DateTime(2025, 4, 27, 15, 9, 39, 409, DateTimeKind.Local).AddTicks(440),
                            Description = "Get some text books for school",
                            Due = new DateTime(2025, 5, 4, 15, 9, 39, 409, DateTimeKind.Local).AddTicks(440),
                            Status = 0,
                            Title = "Get books for school - DB"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 2,
                            Created = new DateTime(2025, 4, 27, 15, 9, 39, 409, DateTimeKind.Local).AddTicks(450),
                            Description = "Get some vegitables for the week",
                            Due = new DateTime(2025, 5, 2, 15, 9, 39, 409, DateTimeKind.Local).AddTicks(450),
                            Status = 2,
                            Title = "Get vegetables"
                        });
                });

            modelBuilder.Entity("Todo", b =>
                {
                    b.HasOne("Author", "Author")
                        .WithMany("Todos")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Author", b =>
                {
                    b.Navigation("Todos");
                });
#pragma warning restore 612, 618
        }
    }
}
